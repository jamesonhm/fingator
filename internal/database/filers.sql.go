// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: filers.sql

package database

import (
	"context"
)

const createFiler = `-- name: CreateFiler :one
INSERT INTO filers (cik, name)
VALUES (
    $1,
    $2
    )
ON CONFLICT ON CONSTRAINT filers_pkey DO UPDATE SET 
    name = EXCLUDED.name
RETURNING cik, name
`

type CreateFilerParams struct {
	Cik  int32
	Name string
}

func (q *Queries) CreateFiler(ctx context.Context, arg CreateFilerParams) (Filer, error) {
	row := q.db.QueryRowContext(ctx, createFiler, arg.Cik, arg.Name)
	var i Filer
	err := row.Scan(&i.Cik, &i.Name)
	return i, err
}

const getFilers = `-- name: GetFilers :many
SELECT cik, name
FROM filers
`

func (q *Queries) GetFilers(ctx context.Context) ([]Filer, error) {
	rows, err := q.db.QueryContext(ctx, getFilers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Filer
	for rows.Next() {
		var i Filer
		if err := rows.Scan(&i.Cik, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
