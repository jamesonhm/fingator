// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cusips.sql

package database

import (
	"context"
	"database/sql"
)

const addCusip = `-- name: AddCusip :exec
INSERT INTO cusips (
    cusip,
    security_name,
    ticker,
    exchange_code,
    security_type
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT ON CONSTRAINT cusips_pkey DO NOTHING
`

type AddCusipParams struct {
	Cusip        string
	SecurityName string
	Ticker       string
	ExchangeCode string
	SecurityType sql.NullString
}

func (q *Queries) AddCusip(ctx context.Context, arg AddCusipParams) error {
	_, err := q.db.ExecContext(ctx, addCusip,
		arg.Cusip,
		arg.SecurityName,
		arg.Ticker,
		arg.ExchangeCode,
		arg.SecurityType,
	)
	return err
}

const getUnmatchedCusips = `-- name: GetUnmatchedCusips :many
SELECT DISTINCT(cusip)
FROM holdings
WHERE cusip NOT IN (
    SELECT cusip FROM cusips
)
`

func (q *Queries) GetUnmatchedCusips(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUnmatchedCusips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var cusip string
		if err := rows.Scan(&cusip); err != nil {
			return nil, err
		}
		items = append(items, cusip)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
